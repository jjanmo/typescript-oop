{
  type CoffeeCup = {
    shots: number;
    hasMilk?: boolean;
    hasHazelnut?: boolean;
    hasCaramel?: boolean;
  };

  interface CoffeeMaker {
    makeCoffee(shots: number): CoffeeCup;
  }

  class CoffeeMachine implements CoffeeMaker {
    private coffeeBeans: number = 0;
    private static BEANS_GRAM_PER_SHOT: number = 10;

    constructor(coffeeBeans: number) {
      this.coffeeBeans = coffeeBeans;
    }

    static makeMachine(shots: number) {
      return new CoffeeMachine(shots);
    }

    setCoffeeBeans(coffeeBeans: number) {
      if (coffeeBeans < 0) {
        throw new Error('value for coffee beans should be greater than 0');
      }
      this.coffeeBeans += coffeeBeans;
    }
    clean() {
      console.log('cleaning the machine...üßº');
    }

    private grindCoffeeBeans(shots: number) {
      console.log('before grinding', this.coffeeBeans);
      if (this.coffeeBeans < shots * CoffeeMachine.BEANS_GRAM_PER_SHOT) {
        throw new Error('not enough coffee beans');
      }
      this.coffeeBeans -= shots * CoffeeMachine.BEANS_GRAM_PER_SHOT;
      console.log('after grinding', this.coffeeBeans);
    }

    private preheat(): void {
      console.log('heating up......üî•');
    }

    private extract(shots: number): CoffeeCup {
      console.log('pulling......‚òïÔ∏è');
      return {
        shots,
        hasMilk: false,
      };
    }

    makeCoffee(shots: number): CoffeeCup {
      this.grindCoffeeBeans(shots);
      this.preheat();
      return this.extract(shots);
    }
  }

  class CafeLatteMachine extends CoffeeMachine {
    constructor(beans: number, private _serialNumber: string) {
      super(beans);
    }

    get serialNumber() {
      return this._serialNumber;
    }

    addMilk() {
      console.log('adding sweet milk...ü•õ');
    }

    makeCoffee(shots: number): CoffeeCup {
      const _coffee = super.makeCoffee(2);
      this.addMilk();
      return {
        ..._coffee,
        hasMilk: true,
      };
    }
  }

  class CaramelCoffeeMaker extends CoffeeMachine {
    mixSweetCaramel() {
      console.log('mixing sweet caramel...üç¨');
    }

    makeCoffee(shots: number): CoffeeCup {
      const _coffee = super.makeCoffee(shots);
      this.mixSweetCaramel();
      return {
        ..._coffee,
        hasCaramel: true,
      };
    }
  }

  const caramelMaker = new CaramelCoffeeMaker(30);
  const caramelCoffee = caramelMaker.makeCoffee(2);
  console.log(caramelCoffee);

  /**
   * ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è
   * CoffeeMachine
   * CafeLatteMachine
   * CaramelCoffeeMaker
   * -> ÏúÑ 3Í∞ÄÏßÄÏùò Í¥ÄÍ≥ÑÍ∞Ä Ï§ëÏöîÌïòÎã§.
   *
   * 1. CoffeeMachineÏùÄ CoffeeMakerÏù¥Îã§.
   * 2. CafeLatteMachineÎäî CoffeeMachineÏù¥Îã§. -> CafeLatteMachineÏùÄ CoffeeMakerÏù¥Îã§.
   * 3. CaramelCoffeeMakerÎäî CoffeeMachineÏù¥Îã§ -> CaramelCoffeeMakerÎäî CoffeeMakerÏù¥Îã§.
   * -> ÎßåÏïΩÏóê ÏïÑÎûò machinesÎ•º CoffeeMaker[] Î°ú ÌÉÄÏûÖÏùÑ Ï†ïÌïòÎ©¥, Î∞∞Ïó¥ ÏïàÏùò ÏöîÏÜåÎì§Ïù¥ Í∞ÅÍ∞Å Îã§Î•∏ ÌÉÄÏûÖÏùÑ Í∞ñÎçîÎùºÍ≥† Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î°ú Í∑úÏïΩÌï¥ÎÜìÏùÄ Î©îÏÜåÎìúÎßåÏùÑ ÏÇ¨Ïö©ÌïòÍ≤å ÎêúÎã§.
   *
   * ‚úÖ Îã§ÌòïÏÑ±Ïù¥ÎûÄ, ÌïòÎÇòÏùò Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÌòπÏùÄ Î∂ÄÎ™® ÌÅ¥ÎûòÏä§Î•º ÏÉÅÏÜç Î∞õÏùÄ ÏûêÏãù ÌÅ¥ÎûòÏä§Îì§Ïù¥ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ÏôÄ Î∂ÄÎ™® ÌÅ¥ÎûòÏä§Ïùò Î©îÏÜåÎìúÎì§ÏùÑ Îã§Î•∏ Î∞©ÏãùÏúºÎ°ú Îã§ÏñëÌïòÍ≤å Íµ¨ÏÑ±Ìï®ÏúºÎ°úÏÑú
   *    Ï°∞Í∏à Ïó¨Îü¨Í∞ÄÏßÄ Í∞ùÏ≤¥Î•º ÏÉùÏÑ±Ìï† Ïàò ÏûàÎèÑÎ°ù ÎßåÎìúÎäî Í≤ÉÏùÑ ÎßêÌïúÎã§.
   * ‚úÖ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ÏôÄ Î∂ÄÎ™® ÌÅ¥ÎûòÏä§Ïóê ÏûàÎäî ÎèôÏùºÌïú Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï®ÏúºÎ°úÏÑú Í∞ÅÍ∞ÅÏùò ÏûêÏãù ÌÅ¥ÎûòÏä§Ïùò ÎÇ¥Î∂Ä Íµ¨ÌòÑ ÏÇ¨Ìï≠ÏùÑ Ïã†Í≤ΩÏì∞ÏßÄÏïäÍ≥† ÏïΩÏÜçÎêú(Í∑úÏïΩÎêú) Î©îÏÑúÎìú(API)Î•º ÏÇ¨Ïö©Ìï®ÏúºÎ°úÏÑú
   *    Ï¢Ä Îçî Í∞ÑÎã®ÌïòÍ≤å Ïù¥Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù ÎèÑÏôÄÏ£ºÎäî Í≤ÉÏùÑ Ï∂îÏÉÅÌôîÎùºÍ≥† Ìï† Ïàò ÏûàÎã§.
   */

  const machines: CoffeeMaker[] = [
    new CoffeeMachine(20),
    new CafeLatteMachine(30, 'S123455667'),
    new CaramelCoffeeMaker(30),
    new CoffeeMachine(20),
    new CafeLatteMachine(30, 'S123455667'),
    new CaramelCoffeeMaker(30),
  ];

  machines.forEach((machine, index) => {
    console.log(`--------${index + 1}  coffee ‚òïÔ∏è---------`);
    machine.makeCoffee(2);
  });
}
